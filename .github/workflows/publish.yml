name: Release & Publish Docker Image

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build, Test & Publish
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Go version from go.mod
        id: go-version
        run: echo "version=$(grep '^go ' go.mod | awk '{print $2}')" >> "$GITHUB_OUTPUT"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.version }}

      - name: Install dependencies and validate tidy
        run: |
          go mod tidy
          git diff --exit-code || (echo "::error::Uncommitted changes after tidy"; exit 1)

      - name: Build binary
        run: go build -v ./...

      - name: Run tests with coverage and race detection
        run: go test -v -race -cover ./...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract tag name
        id: vars
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ steps.vars.outputs.tag }}
          build-args: |
            VERSION=${{ steps.vars.outputs.tag }}
          platforms: linux/amd64,linux/arm64

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: Release ${{ steps.vars.outputs.tag }}
          body: |
            This release was automatically generated for tag `${{ steps.vars.outputs.tag }}`.
          draft: false
          prerelease: ${{ contains(steps.vars.outputs.tag, 'alpha') || contains(steps.vars.outputs.tag, 'beta') }}

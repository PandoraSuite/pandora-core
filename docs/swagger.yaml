definitions:
  dto.APIKeyCreate:
    properties:
      environment_id:
        type: integer
      expires_at:
        type: string
    required:
    - environment_id
    type: object
  dto.APIKeyResponse:
    properties:
      created_at:
        type: string
      environment_id:
        type: integer
      expires_at:
        type: string
      id:
        type: integer
      key:
        type: string
      last_used:
        type: string
      status:
        enum:
        - active
        - deactivated
        type: string
    type: object
  dto.AuthenticateResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: string
      force_password_reset:
        type: boolean
      token_type:
        type: string
    type: object
  dto.ChangePassword:
    properties:
      confirm_password:
        type: string
      new_password:
        type: string
    type: object
  dto.ClientCreate:
    properties:
      email:
        type: string
      name:
        type: string
      type:
        enum:
        - developer
        - organization
        type: string
    required:
    - email
    - name
    - type
    type: object
  dto.ClientResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        enum:
        - developer
        - organization
        type: string
    type: object
  dto.EnvironmentCreate:
    properties:
      name:
        type: string
      project_id:
        type: integer
      services:
        items:
          $ref: '#/definitions/dto.EnvironmentService'
        type: array
    type: object
  dto.EnvironmentResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      project_id:
        type: integer
      services:
        items:
          $ref: '#/definitions/dto.EnvironmentServiceResponse'
        type: array
      status:
        enum:
        - active
        - deactivated
        type: string
    type: object
  dto.EnvironmentService:
    properties:
      id:
        type: integer
      max_request:
        type: integer
    required:
    - id
    type: object
  dto.EnvironmentServiceResponse:
    properties:
      assigned_at:
        type: string
      available_request:
        type: integer
      id:
        type: integer
      max_request:
        type: integer
      name:
        type: string
      version:
        type: string
    type: object
  dto.ProjectCreate:
    properties:
      client_id:
        type: integer
      name:
        type: string
      services:
        items:
          $ref: '#/definitions/dto.ProjectService'
        type: array
      status:
        enum:
        - in_production
        - in_development
        type: string
    required:
    - client_id
    - name
    - status
    type: object
  dto.ProjectResponse:
    properties:
      client_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      services:
        items:
          $ref: '#/definitions/dto.ProjectServiceResponse'
        type: array
      status:
        enum:
        - in_production
        - in_development
        - deactivated
        type: string
    type: object
  dto.ProjectService:
    properties:
      id:
        type: integer
      max_request:
        type: integer
      reset_frequency:
        enum:
        - daily
        - weekly
        - biweekly
        - monthly
        - ""
        type: string
    required:
    - id
    type: object
  dto.ProjectServiceResponse:
    properties:
      assigned_at:
        type: string
      id:
        type: integer
      max_request:
        type: integer
      name:
        type: string
      next_reset:
        type: string
      reset_frequency:
        $ref: '#/definitions/enums.ProjectServiceResetFrequency'
      version:
        type: string
    type: object
  dto.ServiceCreate:
    properties:
      name:
        type: string
      version:
        type: string
    type: object
  dto.ServiceResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        enum:
        - active
        - deactivated
        type: string
      version:
        type: string
    type: object
  enums.ProjectServiceResetFrequency:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - ProjectServiceNull
    - ProjectServiceDaily
    - ProjectServiceWeekly
    - ProjectServiceBiweekly
    - ProjectServiceMonthly
  utils.ErrorResponse:
    properties:
      error: {}
    type: object
info:
  contact:
    email: support@example.com
    name: Pandora Core Support
    url: http://example.com/support
  description: API for centralized API key management and service access control.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Pandora Core
  version: "1.0"
paths:
  /api/v1/api-keys:
    post:
      consumes:
      - application/json
      description: Generates an API Key for a specific environment
      parameters:
      - description: API Key creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.APIKeyCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.APIKeyResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new API Key
      tags:
      - API Keys
  /api/v1/auth/change-password:
    post:
      consumes:
      - application/json
      description: Allows an authenticated user to change their password.
      parameters:
      - description: New password and confirmation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePassword'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Change password
      tags:
      - Authentication
  /api/v1/auth/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticates the administrator and returns a token.
      parameters:
      - description: Login username
        in: formData
        name: username
        required: true
        type: string
      - description: Login password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthenticateResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Authenticate user
      tags:
      - Authentication
  /api/v1/clients:
    get:
      description: Fetches a list of clients, optionally filtered by client type
      parameters:
      - enum:
        - developer
        - organization
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ClientResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all clients with optional filtering by type
      tags:
      - Clients
    post:
      consumes:
      - application/json
      description: Adds a new client to the system
      parameters:
      - description: Client creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ClientCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ClientResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new client
      tags:
      - Clients
  /api/v1/clients/{id}/projects:
    get:
      description: Fetches a list of projects associated with a given client
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProjectResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all projects for a specific client
      tags:
      - Clients
  /api/v1/environments:
    post:
      consumes:
      - application/json
      description: Adds a new environment to the system
      parameters:
      - description: Environment creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EnvironmentCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.EnvironmentResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new environment
      tags:
      - Environments
  /api/v1/environments/{id}/api-keys:
    get:
      description: Returns a list of API Keys associated with a specific environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.APIKeyResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all API Keys for an environment
      tags:
      - Environments
  /api/v1/environments/{id}/services:
    post:
      consumes:
      - application/json
      description: Associates a service with a given environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EnvironmentService'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Assigns a service to an environment
      tags:
      - Environments
  /api/v1/projects:
    post:
      consumes:
      - application/json
      description: Adds a new project to the system
      parameters:
      - description: Project creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ProjectResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new project
      tags:
      - Projects
  /api/v1/projects/{id}/environments:
    get:
      description: Fetches a list of environments associated with a given project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.EnvironmentResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all environments for a specific project
      tags:
      - Projects
  /api/v1/projects/{id}/services:
    post:
      consumes:
      - application/json
      description: Associates a service with a given project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service assignment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectService'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Assigns a service to a project
      tags:
      - Projects
  /api/v1/services:
    get:
      description: Fetches a list of all registered services
      parameters:
      - enum:
        - active
        - deactivated
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/dto.ServiceResponse'
              type: array
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all services
      tags:
      - Services
    post:
      consumes:
      - application/json
      description: Adds a new service to the system
      parameters:
      - description: Service creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ServiceCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ServiceResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new service
      tags:
      - Services
securityDefinitions:
  OAuth2Password:
    flow: password
    tokenUrl: /api/v1/auth/login
    type: oauth2
swagger: "2.0"

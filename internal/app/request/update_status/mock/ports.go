// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/request/update_status/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/request/update_status/ports.go -destination=internal/app/request/update_status/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	enums "github.com/MAD-py/pandora-core/internal/domain/enums"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockRequestRepository is a mock of RequestRepository interface.
type MockRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRepositoryMockRecorder
	isgomock struct{}
}

// MockRequestRepositoryMockRecorder is the mock recorder for MockRequestRepository.
type MockRequestRepositoryMockRecorder struct {
	mock *MockRequestRepository
}

// NewMockRequestRepository creates a new mock instance.
func NewMockRequestRepository(ctrl *gomock.Controller) *MockRequestRepository {
	mock := &MockRequestRepository{ctrl: ctrl}
	mock.recorder = &MockRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRepository) EXPECT() *MockRequestRepositoryMockRecorder {
	return m.recorder
}

// UpdateExecutionStatus mocks base method.
func (m *MockRequestRepository) UpdateExecutionStatus(ctx context.Context, id string, executionStatus enums.RequestExecutionStatus) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutionStatus", ctx, id, executionStatus)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateExecutionStatus indicates an expected call of UpdateExecutionStatus.
func (mr *MockRequestRepositoryMockRecorder) UpdateExecutionStatus(ctx, id, executionStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutionStatus", reflect.TypeOf((*MockRequestRepository)(nil).UpdateExecutionStatus), ctx, id, executionStatus)
}

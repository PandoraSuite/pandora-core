// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/project/remove_service/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/project/remove_service/ports.go -destination=internal/app/project/remove_service/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockProjectRepository) Exists(ctx context.Context, id int) (bool, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockProjectRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockProjectRepository)(nil).Exists), ctx, id)
}

// RemoveService mocks base method.
func (m *MockProjectRepository) RemoveService(ctx context.Context, id, serviceID int) (int64, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveService", ctx, id, serviceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockProjectRepositoryMockRecorder) RemoveService(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockProjectRepository)(nil).RemoveService), ctx, id, serviceID)
}

// MockEnvironmentRepository is a mock of EnvironmentRepository interface.
type MockEnvironmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentRepositoryMockRecorder
	isgomock struct{}
}

// MockEnvironmentRepositoryMockRecorder is the mock recorder for MockEnvironmentRepository.
type MockEnvironmentRepositoryMockRecorder struct {
	mock *MockEnvironmentRepository
}

// NewMockEnvironmentRepository creates a new mock instance.
func NewMockEnvironmentRepository(ctrl *gomock.Controller) *MockEnvironmentRepository {
	mock := &MockEnvironmentRepository{ctrl: ctrl}
	mock.recorder = &MockEnvironmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentRepository) EXPECT() *MockEnvironmentRepositoryMockRecorder {
	return m.recorder
}

// RemoveServiceFromProjectEnvironments mocks base method.
func (m *MockEnvironmentRepository) RemoveServiceFromProjectEnvironments(ctx context.Context, projectID, serviceID int) (int64, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceFromProjectEnvironments", ctx, projectID, serviceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// RemoveServiceFromProjectEnvironments indicates an expected call of RemoveServiceFromProjectEnvironments.
func (mr *MockEnvironmentRepositoryMockRecorder) RemoveServiceFromProjectEnvironments(ctx, projectID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceFromProjectEnvironments", reflect.TypeOf((*MockEnvironmentRepository)(nil).RemoveServiceFromProjectEnvironments), ctx, projectID, serviceID)
}

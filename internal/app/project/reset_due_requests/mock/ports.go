// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/project/reset_due_requests/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/project/reset_due_requests/ports.go -destination=internal/app/project/reset_due_requests/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// ListProjectServiceDueForReset mocks base method.
func (m *MockProjectRepository) ListProjectServiceDueForReset(ctx context.Context, today time.Time) ([]*entities.Project, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectServiceDueForReset", ctx, today)
	ret0, _ := ret[0].([]*entities.Project)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListProjectServiceDueForReset indicates an expected call of ListProjectServiceDueForReset.
func (mr *MockProjectRepositoryMockRecorder) ListProjectServiceDueForReset(ctx, today any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectServiceDueForReset", reflect.TypeOf((*MockProjectRepository)(nil).ListProjectServiceDueForReset), ctx, today)
}

// ResetProjectServiceUsage mocks base method.
func (m *MockProjectRepository) ResetProjectServiceUsage(ctx context.Context, id, serviceID int, nextReset time.Time) ([]*dto.EnvironmentServiceReset, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetProjectServiceUsage", ctx, id, serviceID, nextReset)
	ret0, _ := ret[0].([]*dto.EnvironmentServiceReset)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ResetProjectServiceUsage indicates an expected call of ResetProjectServiceUsage.
func (mr *MockProjectRepositoryMockRecorder) ResetProjectServiceUsage(ctx, id, serviceID, nextReset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetProjectServiceUsage", reflect.TypeOf((*MockProjectRepository)(nil).ResetProjectServiceUsage), ctx, id, serviceID, nextReset)
}

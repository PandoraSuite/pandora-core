// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/project/assign_service/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/project/assign_service/ports.go -destination=internal/app/project/assign_service/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// AddService mocks base method.
func (m *MockProjectRepository) AddService(ctx context.Context, id int, service *entities.ProjectService) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", ctx, id, service)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// AddService indicates an expected call of AddService.
func (mr *MockProjectRepositoryMockRecorder) AddService(ctx, id, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockProjectRepository)(nil).AddService), ctx, id, service)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/delete/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/service/delete/ports.go -destination=internal/app/service/delete/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceRepository is a mock of ServiceRepository interface.
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
	isgomock struct{}
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository.
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance.
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceRepository) Delete(ctx context.Context, id int) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceRepository)(nil).Delete), ctx, id)
}

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// ExistsServiceIn mocks base method.
func (m *MockProjectRepository) ExistsServiceIn(ctx context.Context, serviceID int) (bool, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsServiceIn", ctx, serviceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ExistsServiceIn indicates an expected call of ExistsServiceIn.
func (mr *MockProjectRepositoryMockRecorder) ExistsServiceIn(ctx, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsServiceIn", reflect.TypeOf((*MockProjectRepository)(nil).ExistsServiceIn), ctx, serviceID)
}

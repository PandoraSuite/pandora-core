// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/list_request/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/service/list_request/ports.go -destination=internal/app/service/list_request/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceRepository is a mock of ServiceRepository interface.
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
	isgomock struct{}
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository.
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance.
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockServiceRepository) Exists(ctx context.Context, id int) (bool, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceRepository)(nil).Exists), ctx, id)
}

// MockRequestRepository is a mock of RequestRepository interface.
type MockRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRepositoryMockRecorder
	isgomock struct{}
}

// MockRequestRepositoryMockRecorder is the mock recorder for MockRequestRepository.
type MockRequestRepositoryMockRecorder struct {
	mock *MockRequestRepository
}

// NewMockRequestRepository creates a new mock instance.
func NewMockRequestRepository(ctrl *gomock.Controller) *MockRequestRepository {
	mock := &MockRequestRepository{ctrl: ctrl}
	mock.recorder = &MockRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRepository) EXPECT() *MockRequestRepositoryMockRecorder {
	return m.recorder
}

// ListByService mocks base method.
func (m *MockRequestRepository) ListByService(ctx context.Context, serviceID int, filter *dto.RequestFilter) ([]*dto.RequestResponse, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByService", ctx, serviceID, filter)
	ret0, _ := ret[0].([]*dto.RequestResponse)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListByService indicates an expected call of ListByService.
func (mr *MockRequestRepositoryMockRecorder) ListByService(ctx, serviceID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByService", reflect.TypeOf((*MockRequestRepository)(nil).ListByService), ctx, serviceID, filter)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/environment/assign_service/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/environment/assign_service/ports.go -destination=internal/app/environment/assign_service/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironmentRepository is a mock of EnvironmentRepository interface.
type MockEnvironmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentRepositoryMockRecorder
	isgomock struct{}
}

// MockEnvironmentRepositoryMockRecorder is the mock recorder for MockEnvironmentRepository.
type MockEnvironmentRepositoryMockRecorder struct {
	mock *MockEnvironmentRepository
}

// NewMockEnvironmentRepository creates a new mock instance.
func NewMockEnvironmentRepository(ctrl *gomock.Controller) *MockEnvironmentRepository {
	mock := &MockEnvironmentRepository{ctrl: ctrl}
	mock.recorder = &MockEnvironmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentRepository) EXPECT() *MockEnvironmentRepositoryMockRecorder {
	return m.recorder
}

// AddService mocks base method.
func (m *MockEnvironmentRepository) AddService(ctx context.Context, id int, service *entities.EnvironmentService) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", ctx, id, service)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// AddService indicates an expected call of AddService.
func (mr *MockEnvironmentRepositoryMockRecorder) AddService(ctx, id, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockEnvironmentRepository)(nil).AddService), ctx, id, service)
}

// Exists mocks base method.
func (m *MockEnvironmentRepository) Exists(ctx context.Context, id int) (bool, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockEnvironmentRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockEnvironmentRepository)(nil).Exists), ctx, id)
}

// ExistsServiceIn mocks base method.
func (m *MockEnvironmentRepository) ExistsServiceIn(ctx context.Context, id, serviceID int) (bool, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsServiceIn", ctx, id, serviceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ExistsServiceIn indicates an expected call of ExistsServiceIn.
func (mr *MockEnvironmentRepositoryMockRecorder) ExistsServiceIn(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsServiceIn", reflect.TypeOf((*MockEnvironmentRepository)(nil).ExistsServiceIn), ctx, id, serviceID)
}

// GetProjectServiceQuotaUsage mocks base method.
func (m *MockEnvironmentRepository) GetProjectServiceQuotaUsage(ctx context.Context, id, serviceID int) (*dto.QuotaUsage, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectServiceQuotaUsage", ctx, id, serviceID)
	ret0, _ := ret[0].(*dto.QuotaUsage)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetProjectServiceQuotaUsage indicates an expected call of GetProjectServiceQuotaUsage.
func (mr *MockEnvironmentRepositoryMockRecorder) GetProjectServiceQuotaUsage(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectServiceQuotaUsage", reflect.TypeOf((*MockEnvironmentRepository)(nil).GetProjectServiceQuotaUsage), ctx, id, serviceID)
}

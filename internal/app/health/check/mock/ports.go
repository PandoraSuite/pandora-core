// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/health/check/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/health/check/ports.go -destination=internal/app/health/check/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Latency mocks base method.
func (m *MockDatabase) Latency() (int64, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latency")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Latency indicates an expected call of Latency.
func (mr *MockDatabaseMockRecorder) Latency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latency", reflect.TypeOf((*MockDatabase)(nil).Latency))
}

// Ping mocks base method.
func (m *MockDatabase) Ping() errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDatabaseMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabase)(nil).Ping))
}

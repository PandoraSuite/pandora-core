// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api_key/validate_reserve/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/api_key/validate_reserve/ports.go -destination=internal/app/api_key/validate_reserve/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockRequestRepository is a mock of RequestRepository interface.
type MockRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRepositoryMockRecorder
	isgomock struct{}
}

// MockRequestRepositoryMockRecorder is the mock recorder for MockRequestRepository.
type MockRequestRepositoryMockRecorder struct {
	mock *MockRequestRepository
}

// NewMockRequestRepository creates a new mock instance.
func NewMockRequestRepository(ctrl *gomock.Controller) *MockRequestRepository {
	mock := &MockRequestRepository{ctrl: ctrl}
	mock.recorder = &MockRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRepository) EXPECT() *MockRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRequestRepository) Create(ctx context.Context, request *entities.Request) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRequestRepositoryMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRequestRepository)(nil).Create), ctx, request)
}

// MockReservationRepository is a mock of ReservationRepository interface.
type MockReservationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReservationRepositoryMockRecorder
	isgomock struct{}
}

// MockReservationRepositoryMockRecorder is the mock recorder for MockReservationRepository.
type MockReservationRepositoryMockRecorder struct {
	mock *MockReservationRepository
}

// NewMockReservationRepository creates a new mock instance.
func NewMockReservationRepository(ctrl *gomock.Controller) *MockReservationRepository {
	mock := &MockReservationRepository{ctrl: ctrl}
	mock.recorder = &MockReservationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationRepository) EXPECT() *MockReservationRepositoryMockRecorder {
	return m.recorder
}

// GetByIDWithDetails mocks base method.
func (m *MockReservationRepository) GetByIDWithDetails(ctx context.Context, id string) (*dto.ReservationWithDetails, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithDetails", ctx, id)
	ret0, _ := ret[0].(*dto.ReservationWithDetails)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetByIDWithDetails indicates an expected call of GetByIDWithDetails.
func (mr *MockReservationRepositoryMockRecorder) GetByIDWithDetails(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithDetails", reflect.TypeOf((*MockReservationRepository)(nil).GetByIDWithDetails), ctx, id)
}

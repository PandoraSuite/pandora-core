// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api_key/create/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/api_key/create/ports.go -destination=internal/app/api_key/create/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIKeyRepository is a mock of APIKeyRepository interface.
type MockAPIKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyRepositoryMockRecorder
	isgomock struct{}
}

// MockAPIKeyRepositoryMockRecorder is the mock recorder for MockAPIKeyRepository.
type MockAPIKeyRepositoryMockRecorder struct {
	mock *MockAPIKeyRepository
}

// NewMockAPIKeyRepository creates a new mock instance.
func NewMockAPIKeyRepository(ctrl *gomock.Controller) *MockAPIKeyRepository {
	mock := &MockAPIKeyRepository{ctrl: ctrl}
	mock.recorder = &MockAPIKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyRepository) EXPECT() *MockAPIKeyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAPIKeyRepository) Create(ctx context.Context, apiKey *entities.APIKey) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, apiKey)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAPIKeyRepositoryMockRecorder) Create(ctx, apiKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPIKeyRepository)(nil).Create), ctx, apiKey)
}

// Exists mocks base method.
func (m *MockAPIKeyRepository) Exists(ctx context.Context, key string) (bool, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockAPIKeyRepositoryMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAPIKeyRepository)(nil).Exists), ctx, key)
}

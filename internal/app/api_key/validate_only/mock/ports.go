// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api_key/validate_only/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/api_key/validate_only/ports.go -destination=internal/app/api_key/validate_only/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIKeyRepository is a mock of APIKeyRepository interface.
type MockAPIKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyRepositoryMockRecorder
	isgomock struct{}
}

// MockAPIKeyRepositoryMockRecorder is the mock recorder for MockAPIKeyRepository.
type MockAPIKeyRepositoryMockRecorder struct {
	mock *MockAPIKeyRepository
}

// NewMockAPIKeyRepository creates a new mock instance.
func NewMockAPIKeyRepository(ctrl *gomock.Controller) *MockAPIKeyRepository {
	mock := &MockAPIKeyRepository{ctrl: ctrl}
	mock.recorder = &MockAPIKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyRepository) EXPECT() *MockAPIKeyRepositoryMockRecorder {
	return m.recorder
}

// GetByKey mocks base method.
func (m *MockAPIKeyRepository) GetByKey(ctx context.Context, key string) (*entities.APIKey, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", ctx, key)
	ret0, _ := ret[0].(*entities.APIKey)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockAPIKeyRepositoryMockRecorder) GetByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockAPIKeyRepository)(nil).GetByKey), ctx, key)
}

// UpdateLastUsed mocks base method.
func (m *MockAPIKeyRepository) UpdateLastUsed(ctx context.Context, key string) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastUsed", ctx, key)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateLastUsed indicates an expected call of UpdateLastUsed.
func (mr *MockAPIKeyRepositoryMockRecorder) UpdateLastUsed(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastUsed", reflect.TypeOf((*MockAPIKeyRepository)(nil).UpdateLastUsed), ctx, key)
}

// MockEnvironmentRepository is a mock of EnvironmentRepository interface.
type MockEnvironmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentRepositoryMockRecorder
	isgomock struct{}
}

// MockEnvironmentRepositoryMockRecorder is the mock recorder for MockEnvironmentRepository.
type MockEnvironmentRepositoryMockRecorder struct {
	mock *MockEnvironmentRepository
}

// NewMockEnvironmentRepository creates a new mock instance.
func NewMockEnvironmentRepository(ctrl *gomock.Controller) *MockEnvironmentRepository {
	mock := &MockEnvironmentRepository{ctrl: ctrl}
	mock.recorder = &MockEnvironmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentRepository) EXPECT() *MockEnvironmentRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockEnvironmentRepository) GetByID(ctx context.Context, id int) (*entities.Environment, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Environment)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEnvironmentRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEnvironmentRepository)(nil).GetByID), ctx, id)
}

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// GetProjectClientInfoByID mocks base method.
func (m *MockProjectRepository) GetProjectClientInfoByID(ctx context.Context, id int) (*dto.ProjectClientInfoResponse, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectClientInfoByID", ctx, id)
	ret0, _ := ret[0].(*dto.ProjectClientInfoResponse)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetProjectClientInfoByID indicates an expected call of GetProjectClientInfoByID.
func (mr *MockProjectRepositoryMockRecorder) GetProjectClientInfoByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectClientInfoByID", reflect.TypeOf((*MockProjectRepository)(nil).GetProjectClientInfoByID), ctx, id)
}

// MockServiceRepository is a mock of ServiceRepository interface.
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
	isgomock struct{}
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository.
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance.
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// GetByNameAndVersion mocks base method.
func (m *MockServiceRepository) GetByNameAndVersion(ctx context.Context, name, version string) (*entities.Service, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameAndVersion", ctx, name, version)
	ret0, _ := ret[0].(*entities.Service)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetByNameAndVersion indicates an expected call of GetByNameAndVersion.
func (mr *MockServiceRepositoryMockRecorder) GetByNameAndVersion(ctx, name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameAndVersion", reflect.TypeOf((*MockServiceRepository)(nil).GetByNameAndVersion), ctx, name, version)
}

// MockRequestRepository is a mock of RequestRepository interface.
type MockRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRepositoryMockRecorder
	isgomock struct{}
}

// MockRequestRepositoryMockRecorder is the mock recorder for MockRequestRepository.
type MockRequestRepositoryMockRecorder struct {
	mock *MockRequestRepository
}

// NewMockRequestRepository creates a new mock instance.
func NewMockRequestRepository(ctrl *gomock.Controller) *MockRequestRepository {
	mock := &MockRequestRepository{ctrl: ctrl}
	mock.recorder = &MockRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRepository) EXPECT() *MockRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRequestRepository) Create(ctx context.Context, request *entities.Request) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRequestRepositoryMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRequestRepository)(nil).Create), ctx, request)
}

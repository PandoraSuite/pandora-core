// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/client/list_projects/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/client/list_projects/ports.go -destination=internal/app/client/list_projects/mock/ports.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockClientRepository is a mock of ClientRepository interface.
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
	isgomock struct{}
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository.
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance.
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockClientRepository) Exists(ctx context.Context, id int) (bool, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockClientRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClientRepository)(nil).Exists), ctx, id)
}

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// ListByClient mocks base method.
func (m *MockProjectRepository) ListByClient(ctx context.Context, id int) ([]*entities.Project, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByClient", ctx, id)
	ret0, _ := ret[0].([]*entities.Project)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListByClient indicates an expected call of ListByClient.
func (mr *MockProjectRepositoryMockRecorder) ListByClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByClient", reflect.TypeOf((*MockProjectRepository)(nil).ListByClient), ctx, id)
}

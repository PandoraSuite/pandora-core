// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: internal/adapters/grpc/api_key/proto/api_key.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APIKeyService_Validate_FullMethodName           = "/api_key.APIKeyService/Validate"
	APIKeyService_ValidateAndConsume_FullMethodName = "/api_key.APIKeyService/ValidateAndConsume"
	APIKeyService_ValidateAndBooking_FullMethodName = "/api_key.APIKeyService/ValidateAndBooking"
)

// APIKeyServiceClient is the client API for APIKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIKeyServiceClient interface {
	Validate(ctx context.Context, in *APIKeyValidateBooking, opts ...grpc.CallOption) (*APIKeyValidateResponse, error)
	ValidateAndConsume(ctx context.Context, in *APIKeyValidate, opts ...grpc.CallOption) (*APIKeyValidateConsumeResponse, error)
	ValidateAndBooking(ctx context.Context, in *APIKeyValidate, opts ...grpc.CallOption) (*APIKeyValidateBookingResponse, error)
}

type aPIKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIKeyServiceClient(cc grpc.ClientConnInterface) APIKeyServiceClient {
	return &aPIKeyServiceClient{cc}
}

func (c *aPIKeyServiceClient) Validate(ctx context.Context, in *APIKeyValidateBooking, opts ...grpc.CallOption) (*APIKeyValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIKeyValidateResponse)
	err := c.cc.Invoke(ctx, APIKeyService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyServiceClient) ValidateAndConsume(ctx context.Context, in *APIKeyValidate, opts ...grpc.CallOption) (*APIKeyValidateConsumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIKeyValidateConsumeResponse)
	err := c.cc.Invoke(ctx, APIKeyService_ValidateAndConsume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyServiceClient) ValidateAndBooking(ctx context.Context, in *APIKeyValidate, opts ...grpc.CallOption) (*APIKeyValidateBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIKeyValidateBookingResponse)
	err := c.cc.Invoke(ctx, APIKeyService_ValidateAndBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIKeyServiceServer is the server API for APIKeyService service.
// All implementations must embed UnimplementedAPIKeyServiceServer
// for forward compatibility.
type APIKeyServiceServer interface {
	Validate(context.Context, *APIKeyValidateBooking) (*APIKeyValidateResponse, error)
	ValidateAndConsume(context.Context, *APIKeyValidate) (*APIKeyValidateConsumeResponse, error)
	ValidateAndBooking(context.Context, *APIKeyValidate) (*APIKeyValidateBookingResponse, error)
	mustEmbedUnimplementedAPIKeyServiceServer()
}

// UnimplementedAPIKeyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIKeyServiceServer struct{}

func (UnimplementedAPIKeyServiceServer) Validate(context.Context, *APIKeyValidateBooking) (*APIKeyValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAPIKeyServiceServer) ValidateAndConsume(context.Context, *APIKeyValidate) (*APIKeyValidateConsumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAndConsume not implemented")
}
func (UnimplementedAPIKeyServiceServer) ValidateAndBooking(context.Context, *APIKeyValidate) (*APIKeyValidateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAndBooking not implemented")
}
func (UnimplementedAPIKeyServiceServer) mustEmbedUnimplementedAPIKeyServiceServer() {}
func (UnimplementedAPIKeyServiceServer) testEmbeddedByValue()                       {}

// UnsafeAPIKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIKeyServiceServer will
// result in compilation errors.
type UnsafeAPIKeyServiceServer interface {
	mustEmbedUnimplementedAPIKeyServiceServer()
}

func RegisterAPIKeyServiceServer(s grpc.ServiceRegistrar, srv APIKeyServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPIKeyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APIKeyService_ServiceDesc, srv)
}

func _APIKeyService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyValidateBooking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIKeyService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyServiceServer).Validate(ctx, req.(*APIKeyValidateBooking))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyService_ValidateAndConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyValidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyServiceServer).ValidateAndConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIKeyService_ValidateAndConsume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyServiceServer).ValidateAndConsume(ctx, req.(*APIKeyValidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyService_ValidateAndBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyValidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyServiceServer).ValidateAndBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIKeyService_ValidateAndBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyServiceServer).ValidateAndBooking(ctx, req.(*APIKeyValidate))
	}
	return interceptor(ctx, in, info, handler)
}

// APIKeyService_ServiceDesc is the grpc.ServiceDesc for APIKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_key.APIKeyService",
	HandlerType: (*APIKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _APIKeyService_Validate_Handler,
		},
		{
			MethodName: "ValidateAndConsume",
			Handler:    _APIKeyService_ValidateAndConsume_Handler,
		},
		{
			MethodName: "ValidateAndBooking",
			Handler:    _APIKeyService_ValidateAndBooking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/adapters/grpc/api_key/proto/api_key.proto",
}

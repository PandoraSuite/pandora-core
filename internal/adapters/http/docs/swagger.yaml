definitions:
  dto.APIKeyCreate:
    properties:
      environmentID:
        type: integer
      expiresAt:
        type: string
    required:
    - environmentID
    type: object
  dto.APIKeyResponse:
    properties:
      createdAt:
        type: string
      environmentID:
        type: integer
      expiresAt:
        type: string
      id:
        type: integer
      key:
        type: string
      lastUsed:
        type: string
      status:
        $ref: '#/definitions/enums.APIKeyStatus'
    type: object
  dto.APIKeyUpdate:
    properties:
      expiresAt:
        type: string
    type: object
  dto.AuthenticateResponse:
    properties:
      expiresIn:
        type: string
      forcePasswordReset:
        type: boolean
      token:
        type: string
      tokenType:
        type: string
    type: object
  dto.ChangePassword:
    properties:
      confirmPassword:
        type: string
      newPassword:
        type: string
      username:
        type: string
    type: object
  dto.ClientCreate:
    properties:
      email:
        type: string
      name:
        type: string
      type:
        $ref: '#/definitions/enums.ClientType'
    type: object
  dto.ClientResponse:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        $ref: '#/definitions/enums.ClientType'
    type: object
  dto.ClientUpdate:
    properties:
      email:
        type: string
      name:
        type: string
      type:
        $ref: '#/definitions/enums.ClientType'
    type: object
  dto.EnvironmentCreate:
    properties:
      name:
        type: string
      projectID:
        type: integer
      services:
        items:
          $ref: '#/definitions/dto.EnvironmentService'
        type: array
    required:
    - name
    - projectID
    - services
    type: object
  dto.EnvironmentResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      projectID:
        type: integer
      services:
        items:
          $ref: '#/definitions/dto.EnvironmentServiceResponse'
        type: array
      status:
        $ref: '#/definitions/enums.EnvironmentStatus'
    type: object
  dto.EnvironmentService:
    properties:
      id:
        type: integer
      maxRequest:
        type: integer
    required:
    - id
    type: object
  dto.EnvironmentServiceReset:
    properties:
      id:
        type: integer
      name:
        type: string
      service:
        $ref: '#/definitions/dto.EnvironmentServiceResponse'
      status:
        $ref: '#/definitions/enums.EnvironmentStatus'
    type: object
  dto.EnvironmentServiceResponse:
    properties:
      assignedAt:
        type: string
      availableRequest:
        type: integer
      id:
        type: integer
      maxRequest:
        type: integer
      name:
        type: string
      version:
        type: string
    type: object
  dto.EnvironmentServiceUpdate:
    properties:
      availableRequest:
        type: integer
      maxRequest:
        type: integer
    type: object
  dto.EnvironmentUpdate:
    properties:
      name:
        type: string
    type: object
  dto.ProjectCreate:
    properties:
      clientID:
        type: integer
      name:
        type: string
      services:
        items:
          $ref: '#/definitions/dto.ProjectService'
        type: array
      status:
        $ref: '#/definitions/enums.ProjectStatus'
    type: object
  dto.ProjectResponse:
    properties:
      clientID:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      services:
        items:
          $ref: '#/definitions/dto.ProjectServiceResponse'
        type: array
      status:
        $ref: '#/definitions/enums.ProjectStatus'
    type: object
  dto.ProjectService:
    properties:
      id:
        type: integer
      maxRequest:
        type: integer
      resetFrequency:
        $ref: '#/definitions/enums.ProjectServiceResetFrequency'
    type: object
  dto.ProjectServiceResetRequest:
    properties:
      recalculateNextReset:
        type: boolean
    type: object
  dto.ProjectServiceResetRequestResponse:
    properties:
      environmentServices:
        items:
          $ref: '#/definitions/dto.EnvironmentServiceReset'
        type: array
      projectService:
        $ref: '#/definitions/dto.ProjectServiceResponse'
      resetCount:
        type: integer
    type: object
  dto.ProjectServiceResponse:
    properties:
      assignedAt:
        type: string
      id:
        type: integer
      maxRequest:
        type: integer
      name:
        type: string
      nextReset:
        type: string
      resetFrequency:
        $ref: '#/definitions/enums.ProjectServiceResetFrequency'
      version:
        type: string
    type: object
  dto.ProjectServiceUpdate:
    properties:
      maxRequest:
        type: integer
      nextReset:
        type: string
      resetFrequency:
        $ref: '#/definitions/enums.ProjectServiceResetFrequency'
    type: object
  dto.ProjectUpdate:
    properties:
      name:
        type: string
    type: object
  dto.ServiceCreate:
    properties:
      name:
        type: string
      version:
        type: string
    required:
    - name
    - version
    type: object
  dto.ServiceResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        $ref: '#/definitions/enums.ServiceStatus'
      version:
        type: string
    type: object
  enums.APIKeyStatus:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - APIKeyStatusNull
    - APIKeyActive
    - APIKeyDeactivated
  enums.ClientType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - ClientTypeNull
    - ClientDeveloper
    - ClientOrganization
  enums.EnvironmentStatus:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - EnvironmentStatusNull
    - EnvironmentActive
    - EnvironmentDeactivated
  enums.ProjectServiceResetFrequency:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - ProjectServiceNull
    - ProjectServiceDaily
    - ProjectServiceWeekly
    - ProjectServiceBiweekly
    - ProjectServiceMonthly
  enums.ProjectStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - ProjectStatusNull
    - ProjectInProduction
    - ProjectInDevelopment
    - ProjectDeactivated
  enums.ServiceStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - ServiceStatusNull
    - ServiceActive
    - ServiceDeactivated
    - ServiceDeprecated
  utils.ErrorResponse:
    properties:
      error: {}
    type: object
info:
  contact:
    email: support@example.com
    name: Pandora Core Support
    url: http://example.com/support
  description: API for centralized API key management and service access control.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Pandora Core
  version: "1.0"
paths:
  /api/v1/api-keys:
    post:
      consumes:
      - application/json
      description: Generates an API Key for a specific environment
      parameters:
      - description: API Key creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.APIKeyCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.APIKeyResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new API Key
      tags:
      - API Keys
  /api/v1/api-keys/{id}:
    patch:
      consumes:
      - application/json
      description: Modifies the expiration date of a specific API key by ID
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated API key data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.APIKeyUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIKeyResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Updates an API key
      tags:
      - API Keys
  /api/v1/auth/change-password:
    post:
      consumes:
      - application/json
      description: Allows an authenticated user to change their password.
      parameters:
      - description: New password and confirmation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePassword'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Change password
      tags:
      - Authentication
  /api/v1/auth/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticates the administrator and returns a token.
      parameters:
      - description: Login username
        in: formData
        name: username
        required: true
        type: string
      - description: Login password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthenticateResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Authenticate user
      tags:
      - Authentication
  /api/v1/clients:
    get:
      consumes:
      - application/json
      description: Fetches a list of clients, optionally filtered by client type
      parameters:
      - enum:
        - 0
        - 1
        - 2
        in: query
        name: type
        type: integer
        x-enum-varnames:
        - ClientTypeNull
        - ClientDeveloper
        - ClientOrganization
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ClientResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all clients with optional filtering by type
      tags:
      - Clients
    post:
      consumes:
      - application/json
      description: Adds a new client to the system
      parameters:
      - description: Client creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ClientCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ClientResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new client
      tags:
      - Clients
  /api/v1/clients/{id}:
    get:
      consumes:
      - application/json
      description: Fetches the details of a specific client using its ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ClientResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves a client by ID
      tags:
      - Clients
    patch:
      description: Modifies client data based on the provided ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated client data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ClientUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ClientResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Updates an existing client
      tags:
      - Clients
  /api/v1/clients/{id}/projects:
    get:
      consumes:
      - application/json
      description: Fetches a list of projects associated with a given client
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProjectResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all projects for a specific client
      tags:
      - Clients
  /api/v1/environments:
    post:
      consumes:
      - application/json
      description: Adds a new environment to the system
      parameters:
      - description: Environment creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EnvironmentCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.EnvironmentResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new environment
      tags:
      - Environments
  /api/v1/environments/{id}:
    get:
      consumes:
      - application/json
      description: Fetches the details of a specific environment using its ID
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EnvironmentResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves an environment by ID
      tags:
      - Environments
    patch:
      consumes:
      - application/json
      description: Modifies the details of a specific environment by ID
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated environment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EnvironmentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EnvironmentResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Updates an environment
      tags:
      - Environments
  /api/v1/environments/{id}/api-keys:
    get:
      consumes:
      - application/json
      description: Returns a list of API Keys associated with a specific environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.APIKeyResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all API Keys for an environment
      tags:
      - Environments
  /api/v1/environments/{id}/services:
    post:
      consumes:
      - application/json
      description: Associates a service with a given environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EnvironmentService'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EnvironmentServiceResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Assigns a service to an environment
      tags:
      - Environments
  /api/v1/environments/{id}/services/{service_id}:
    delete:
      consumes:
      - application/json
      description: Disassociates a service from a specific environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Removes a service from an environment
      tags:
      - Environments
    patch:
      consumes:
      - application/json
      description: Modifies the configuration of a service within a specific environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: integer
      - description: Updated service configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.EnvironmentServiceUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EnvironmentServiceResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Updates a service assigned to an environment
      tags:
      - Environments
  /api/v1/environments/{id}/services/{service_id}/reset-requests:
    patch:
      description: Resets the available request count for a specific service within
        an environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EnvironmentServiceResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Resets request quota for a service in an environment
      tags:
      - Environments
  /api/v1/projects:
    post:
      consumes:
      - application/json
      description: Adds a new project to the system
      parameters:
      - description: Project creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ProjectResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new project
      tags:
      - Projects
  /api/v1/projects/{id}:
    get:
      consumes:
      - application/json
      description: Fetches the details of a specific project using its ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProjectResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves a project by ID
      tags:
      - Projects
    patch:
      consumes:
      - application/json
      description: Modifies the details of a specific project by ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated project data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProjectResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Updates a project
      tags:
      - Projects
  /api/v1/projects/{id}/environments:
    get:
      consumes:
      - application/json
      description: Fetches a list of environments associated with a given project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.EnvironmentResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all environments for a specific project
      tags:
      - Projects
  /api/v1/projects/{id}/services:
    post:
      consumes:
      - application/json
      description: Associates a service with a given project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service assignment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectService'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProjectServiceResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Assigns a service to a project
      tags:
      - Projects
  /api/v1/projects/{id}/services/{service_id}:
    delete:
      description: Disassociates a service from a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Removes a service from a project
      tags:
      - Projects
    patch:
      consumes:
      - application/json
      description: Modifies the configuration of a service within a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: integer
      - description: Updated service configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectServiceUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProjectServiceResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Updates a service assigned to a project
      tags:
      - Projects
  /api/v1/projects/{id}/services/{service_id}/reset-requests:
    post:
      consumes:
      - application/json
      description: Resets the request quota for a specific service assigned to a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: integer
      - description: Reset configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectServiceResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProjectServiceResetRequestResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Resets available requests for a service in a project
      tags:
      - Projects
  /api/v1/services:
    get:
      consumes:
      - application/json
      description: Fetches a list of all registered services
      parameters:
      - enum:
        - 0
        - 1
        - 2
        - 3
        in: query
        name: status
        type: integer
        x-enum-varnames:
        - ServiceStatusNull
        - ServiceActive
        - ServiceDeactivated
        - ServiceDeprecated
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ServiceResponse'
            type: array
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Retrieves all services
      tags:
      - Services
    post:
      consumes:
      - application/json
      description: Adds a new service to the system
      parameters:
      - description: Service creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ServiceCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ServiceResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Creates a new service
      tags:
      - Services
  /api/v1/services/{id}:
    delete:
      description: Permanently removes a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Deletes a service
      tags:
      - Services
  /api/v1/services/{id}/status:
    patch:
      consumes:
      - application/json
      description: Changes the current status of a specific service by ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      - description: New service status
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ServiceResponse'
        default:
          description: Default error response for all failures
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Updates the status of a service
      tags:
      - Services
securityDefinitions:
  OAuth2Password:
    flow: password
    tokenUrl: /api/v1/auth/login
    type: oauth2
swagger: "2.0"
tags:
- name: Authentication
- name: Services
- name: Clients
- name: Projects
- name: Environments
- name: API Keys

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/api_key.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/api_key.go -destination=internal/ports/outbound/mock/api_key.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIKeyPort is a mock of APIKeyPort interface.
type MockAPIKeyPort struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyPortMockRecorder
	isgomock struct{}
}

// MockAPIKeyPortMockRecorder is the mock recorder for MockAPIKeyPort.
type MockAPIKeyPortMockRecorder struct {
	mock *MockAPIKeyPort
}

// NewMockAPIKeyPort creates a new mock instance.
func NewMockAPIKeyPort(ctrl *gomock.Controller) *MockAPIKeyPort {
	mock := &MockAPIKeyPort{ctrl: ctrl}
	mock.recorder = &MockAPIKeyPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyPort) EXPECT() *MockAPIKeyPortMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockAPIKeyPort) Exists(ctx context.Context, key string) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockAPIKeyPortMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAPIKeyPort)(nil).Exists), ctx, key)
}

// FindByEnvironment mocks base method.
func (m *MockAPIKeyPort) FindByEnvironment(ctx context.Context, environmentID int) ([]*entities.APIKey, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEnvironment", ctx, environmentID)
	ret0, _ := ret[0].([]*entities.APIKey)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByEnvironment indicates an expected call of FindByEnvironment.
func (mr *MockAPIKeyPortMockRecorder) FindByEnvironment(ctx, environmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEnvironment", reflect.TypeOf((*MockAPIKeyPort)(nil).FindByEnvironment), ctx, environmentID)
}

// FindByID mocks base method.
func (m *MockAPIKeyPort) FindByID(ctx context.Context, id int) (*entities.APIKey, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entities.APIKey)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAPIKeyPortMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAPIKeyPort)(nil).FindByID), ctx, id)
}

// FindByKey mocks base method.
func (m *MockAPIKeyPort) FindByKey(ctx context.Context, key string) (*entities.APIKey, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", ctx, key)
	ret0, _ := ret[0].(*entities.APIKey)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockAPIKeyPortMockRecorder) FindByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockAPIKeyPort)(nil).FindByKey), ctx, key)
}

// Save mocks base method.
func (m *MockAPIKeyPort) Save(ctx context.Context, apiKey *entities.APIKey) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, apiKey)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAPIKeyPortMockRecorder) Save(ctx, apiKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAPIKeyPort)(nil).Save), ctx, apiKey)
}

// Update mocks base method.
func (m *MockAPIKeyPort) Update(ctx context.Context, id int, update *dto.APIKeyUpdate) (*entities.APIKey, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, update)
	ret0, _ := ret[0].(*entities.APIKey)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAPIKeyPortMockRecorder) Update(ctx, id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAPIKeyPort)(nil).Update), ctx, id, update)
}

// UpdateLastUsed mocks base method.
func (m *MockAPIKeyPort) UpdateLastUsed(ctx context.Context, key string) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastUsed", ctx, key)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// UpdateLastUsed indicates an expected call of UpdateLastUsed.
func (mr *MockAPIKeyPortMockRecorder) UpdateLastUsed(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastUsed", reflect.TypeOf((*MockAPIKeyPort)(nil).UpdateLastUsed), ctx, key)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/client.go -destination=internal/ports/outbound/mock/client.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockClientPort is a mock of ClientPort interface.
type MockClientPort struct {
	ctrl     *gomock.Controller
	recorder *MockClientPortMockRecorder
	isgomock struct{}
}

// MockClientPortMockRecorder is the mock recorder for MockClientPort.
type MockClientPortMockRecorder struct {
	mock *MockClientPort
}

// NewMockClientPort creates a new mock instance.
func NewMockClientPort(ctrl *gomock.Controller) *MockClientPort {
	mock := &MockClientPort{ctrl: ctrl}
	mock.recorder = &MockClientPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientPort) EXPECT() *MockClientPortMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockClientPort) Exists(ctx context.Context, id int) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockClientPortMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClientPort)(nil).Exists), ctx, id)
}

// FindAll mocks base method.
func (m *MockClientPort) FindAll(ctx context.Context, filter *dto.ClientFilter) ([]*entities.Client, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filter)
	ret0, _ := ret[0].([]*entities.Client)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockClientPortMockRecorder) FindAll(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockClientPort)(nil).FindAll), ctx, filter)
}

// FindByID mocks base method.
func (m *MockClientPort) FindByID(ctx context.Context, id int) (*entities.Client, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entities.Client)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockClientPortMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockClientPort)(nil).FindByID), ctx, id)
}

// Save mocks base method.
func (m *MockClientPort) Save(ctx context.Context, client *entities.Client) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, client)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockClientPortMockRecorder) Save(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClientPort)(nil).Save), ctx, client)
}

// Update mocks base method.
func (m *MockClientPort) Update(ctx context.Context, id int, update *dto.ClientUpdate) (*entities.Client, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, update)
	ret0, _ := ret[0].(*entities.Client)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClientPortMockRecorder) Update(ctx, id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientPort)(nil).Update), ctx, id, update)
}

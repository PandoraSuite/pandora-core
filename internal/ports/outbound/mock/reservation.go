// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/reservation.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/reservation.go -destination=internal/ports/outbound/mock/reservation.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockReservationPort is a mock of ReservationPort interface.
type MockReservationPort struct {
	ctrl     *gomock.Controller
	recorder *MockReservationPortMockRecorder
	isgomock struct{}
}

// MockReservationPortMockRecorder is the mock recorder for MockReservationPort.
type MockReservationPortMockRecorder struct {
	mock *MockReservationPort
}

// NewMockReservationPort creates a new mock instance.
func NewMockReservationPort(ctrl *gomock.Controller) *MockReservationPort {
	mock := &MockReservationPort{ctrl: ctrl}
	mock.recorder = &MockReservationPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationPort) EXPECT() *MockReservationPortMockRecorder {
	return m.recorder
}

// CountByEnvironmentAndService mocks base method.
func (m *MockReservationPort) CountByEnvironmentAndService(ctx context.Context, environment_id, service_id int) (int, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByEnvironmentAndService", ctx, environment_id, service_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// CountByEnvironmentAndService indicates an expected call of CountByEnvironmentAndService.
func (mr *MockReservationPortMockRecorder) CountByEnvironmentAndService(ctx, environment_id, service_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByEnvironmentAndService", reflect.TypeOf((*MockReservationPort)(nil).CountByEnvironmentAndService), ctx, environment_id, service_id)
}

// Delete mocks base method.
func (m *MockReservationPort) Delete(ctx context.Context, id string) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReservationPortMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReservationPort)(nil).Delete), ctx, id)
}

// FindByID mocks base method.
func (m *MockReservationPort) FindByID(ctx context.Context, id string) (*entities.Reservation, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entities.Reservation)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReservationPortMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReservationPort)(nil).FindByID), ctx, id)
}

// FindByIDWithDetails mocks base method.
func (m *MockReservationPort) FindByIDWithDetails(ctx context.Context, id string) (*dto.ReservationWithDetails, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDWithDetails", ctx, id)
	ret0, _ := ret[0].(*dto.ReservationWithDetails)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByIDWithDetails indicates an expected call of FindByIDWithDetails.
func (mr *MockReservationPortMockRecorder) FindByIDWithDetails(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDWithDetails", reflect.TypeOf((*MockReservationPort)(nil).FindByIDWithDetails), ctx, id)
}

// Save mocks base method.
func (m *MockReservationPort) Save(ctx context.Context, reservation *entities.Reservation) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, reservation)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockReservationPortMockRecorder) Save(ctx, reservation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReservationPort)(nil).Save), ctx, reservation)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/token.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/token.go -destination=internal/ports/outbound/mock/token.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenPort is a mock of TokenPort interface.
type MockTokenPort struct {
	ctrl     *gomock.Controller
	recorder *MockTokenPortMockRecorder
	isgomock struct{}
}

// MockTokenPortMockRecorder is the mock recorder for MockTokenPort.
type MockTokenPortMockRecorder struct {
	mock *MockTokenPort
}

// NewMockTokenPort creates a new mock instance.
func NewMockTokenPort(ctrl *gomock.Controller) *MockTokenPort {
	mock := &MockTokenPort{ctrl: ctrl}
	mock.recorder = &MockTokenPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenPort) EXPECT() *MockTokenPortMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenPort) GenerateToken(ctx context.Context, subject string) (*dto.TokenResponse, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, subject)
	ret0, _ := ret[0].(*dto.TokenResponse)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenPortMockRecorder) GenerateToken(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenPort)(nil).GenerateToken), ctx, subject)
}

// ValidateToken mocks base method.
func (m *MockTokenPort) ValidateToken(ctx context.Context, token *dto.TokenRequest) (string, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenPortMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenPort)(nil).ValidateToken), ctx, token)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/service.go -destination=internal/ports/outbound/mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	enums "github.com/MAD-py/pandora-core/internal/domain/enums"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockServicePort is a mock of ServicePort interface.
type MockServicePort struct {
	ctrl     *gomock.Controller
	recorder *MockServicePortMockRecorder
	isgomock struct{}
}

// MockServicePortMockRecorder is the mock recorder for MockServicePort.
type MockServicePortMockRecorder struct {
	mock *MockServicePort
}

// NewMockServicePort creates a new mock instance.
func NewMockServicePort(ctrl *gomock.Controller) *MockServicePort {
	mock := &MockServicePort{ctrl: ctrl}
	mock.recorder = &MockServicePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePort) EXPECT() *MockServicePortMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServicePort) Delete(ctx context.Context, id int) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServicePortMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServicePort)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockServicePort) FindAll(ctx context.Context, filter *dto.ServiceFilter) ([]*entities.Service, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filter)
	ret0, _ := ret[0].([]*entities.Service)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockServicePortMockRecorder) FindAll(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockServicePort)(nil).FindAll), ctx, filter)
}

// Save mocks base method.
func (m *MockServicePort) Save(ctx context.Context, service *entities.Service) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, service)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockServicePortMockRecorder) Save(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockServicePort)(nil).Save), ctx, service)
}

// UpdateStatus mocks base method.
func (m *MockServicePort) UpdateStatus(ctx context.Context, id int, status enums.ServiceStatus) (*entities.Service, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*entities.Service)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockServicePortMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockServicePort)(nil).UpdateStatus), ctx, id, status)
}

// MockServiceFindPort is a mock of ServiceFindPort interface.
type MockServiceFindPort struct {
	ctrl     *gomock.Controller
	recorder *MockServiceFindPortMockRecorder
	isgomock struct{}
}

// MockServiceFindPortMockRecorder is the mock recorder for MockServiceFindPort.
type MockServiceFindPortMockRecorder struct {
	mock *MockServiceFindPort
}

// NewMockServiceFindPort creates a new mock instance.
func NewMockServiceFindPort(ctrl *gomock.Controller) *MockServiceFindPort {
	mock := &MockServiceFindPort{ctrl: ctrl}
	mock.recorder = &MockServiceFindPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceFindPort) EXPECT() *MockServiceFindPortMockRecorder {
	return m.recorder
}

// FindByNameAndVersion mocks base method.
func (m *MockServiceFindPort) FindByNameAndVersion(ctx context.Context, name, version string) (*entities.Service, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameAndVersion", ctx, name, version)
	ret0, _ := ret[0].(*entities.Service)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByNameAndVersion indicates an expected call of FindByNameAndVersion.
func (mr *MockServiceFindPortMockRecorder) FindByNameAndVersion(ctx, name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameAndVersion", reflect.TypeOf((*MockServiceFindPort)(nil).FindByNameAndVersion), ctx, name, version)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/request_log.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/request_log.go -destination=internal/ports/outbound/mock/request_log.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	enums "github.com/MAD-py/pandora-core/internal/domain/enums"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockRequestLogPort is a mock of RequestLogPort interface.
type MockRequestLogPort struct {
	ctrl     *gomock.Controller
	recorder *MockRequestLogPortMockRecorder
	isgomock struct{}
}

// MockRequestLogPortMockRecorder is the mock recorder for MockRequestLogPort.
type MockRequestLogPortMockRecorder struct {
	mock *MockRequestLogPort
}

// NewMockRequestLogPort creates a new mock instance.
func NewMockRequestLogPort(ctrl *gomock.Controller) *MockRequestLogPort {
	mock := &MockRequestLogPort{ctrl: ctrl}
	mock.recorder = &MockRequestLogPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestLogPort) EXPECT() *MockRequestLogPortMockRecorder {
	return m.recorder
}

// DeleteByService mocks base method.
func (m *MockRequestLogPort) DeleteByService(ctx context.Context, serviceID int) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByService", ctx, serviceID)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeleteByService indicates an expected call of DeleteByService.
func (mr *MockRequestLogPortMockRecorder) DeleteByService(ctx, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByService", reflect.TypeOf((*MockRequestLogPort)(nil).DeleteByService), ctx, serviceID)
}

// Save mocks base method.
func (m *MockRequestLogPort) Save(ctx context.Context, requestLog *entities.RequestLog) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, requestLog)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRequestLogPortMockRecorder) Save(ctx, requestLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRequestLogPort)(nil).Save), ctx, requestLog)
}

// SaveAsInitialPoint mocks base method.
func (m *MockRequestLogPort) SaveAsInitialPoint(ctx context.Context, requestLog *entities.RequestLog) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAsInitialPoint", ctx, requestLog)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// SaveAsInitialPoint indicates an expected call of SaveAsInitialPoint.
func (mr *MockRequestLogPortMockRecorder) SaveAsInitialPoint(ctx, requestLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAsInitialPoint", reflect.TypeOf((*MockRequestLogPort)(nil).SaveAsInitialPoint), ctx, requestLog)
}

// UpdateExecutionStatus mocks base method.
func (m *MockRequestLogPort) UpdateExecutionStatus(ctx context.Context, id string, executionStatus enums.RequestLogExecutionStatus) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutionStatus", ctx, id, executionStatus)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// UpdateExecutionStatus indicates an expected call of UpdateExecutionStatus.
func (mr *MockRequestLogPortMockRecorder) UpdateExecutionStatus(ctx, id, executionStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutionStatus", reflect.TypeOf((*MockRequestLogPort)(nil).UpdateExecutionStatus), ctx, id, executionStatus)
}

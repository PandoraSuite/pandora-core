// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/environment.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/environment.go -destination=internal/ports/outbound/mock/environment.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironmentPort is a mock of EnvironmentPort interface.
type MockEnvironmentPort struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentPortMockRecorder
	isgomock struct{}
}

// MockEnvironmentPortMockRecorder is the mock recorder for MockEnvironmentPort.
type MockEnvironmentPortMockRecorder struct {
	mock *MockEnvironmentPort
}

// NewMockEnvironmentPort creates a new mock instance.
func NewMockEnvironmentPort(ctrl *gomock.Controller) *MockEnvironmentPort {
	mock := &MockEnvironmentPort{ctrl: ctrl}
	mock.recorder = &MockEnvironmentPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentPort) EXPECT() *MockEnvironmentPortMockRecorder {
	return m.recorder
}

// AddService mocks base method.
func (m *MockEnvironmentPort) AddService(ctx context.Context, id int, service *entities.EnvironmentService) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", ctx, id, service)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// AddService indicates an expected call of AddService.
func (mr *MockEnvironmentPortMockRecorder) AddService(ctx, id, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockEnvironmentPort)(nil).AddService), ctx, id, service)
}

// DecrementAvailableRequest mocks base method.
func (m *MockEnvironmentPort) DecrementAvailableRequest(ctx context.Context, id, serviceID int) (*dto.DecrementAvailableRequest, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementAvailableRequest", ctx, id, serviceID)
	ret0, _ := ret[0].(*dto.DecrementAvailableRequest)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// DecrementAvailableRequest indicates an expected call of DecrementAvailableRequest.
func (mr *MockEnvironmentPortMockRecorder) DecrementAvailableRequest(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementAvailableRequest", reflect.TypeOf((*MockEnvironmentPort)(nil).DecrementAvailableRequest), ctx, id, serviceID)
}

// Exists mocks base method.
func (m *MockEnvironmentPort) Exists(ctx context.Context, id int) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockEnvironmentPortMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockEnvironmentPort)(nil).Exists), ctx, id)
}

// ExistsServiceIn mocks base method.
func (m *MockEnvironmentPort) ExistsServiceIn(ctx context.Context, id, serviceID int) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsServiceIn", ctx, id, serviceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ExistsServiceIn indicates an expected call of ExistsServiceIn.
func (mr *MockEnvironmentPortMockRecorder) ExistsServiceIn(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsServiceIn", reflect.TypeOf((*MockEnvironmentPort)(nil).ExistsServiceIn), ctx, id, serviceID)
}

// ExistsServiceWithInfiniteMaxRequest mocks base method.
func (m *MockEnvironmentPort) ExistsServiceWithInfiniteMaxRequest(ctx context.Context, projectID, serviceID int) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsServiceWithInfiniteMaxRequest", ctx, projectID, serviceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ExistsServiceWithInfiniteMaxRequest indicates an expected call of ExistsServiceWithInfiniteMaxRequest.
func (mr *MockEnvironmentPortMockRecorder) ExistsServiceWithInfiniteMaxRequest(ctx, projectID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsServiceWithInfiniteMaxRequest", reflect.TypeOf((*MockEnvironmentPort)(nil).ExistsServiceWithInfiniteMaxRequest), ctx, projectID, serviceID)
}

// FindByID mocks base method.
func (m *MockEnvironmentPort) FindByID(ctx context.Context, id int) (*entities.Environment, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entities.Environment)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockEnvironmentPortMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockEnvironmentPort)(nil).FindByID), ctx, id)
}

// FindByProject mocks base method.
func (m *MockEnvironmentPort) FindByProject(ctx context.Context, projectID int) ([]*entities.Environment, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProject", ctx, projectID)
	ret0, _ := ret[0].([]*entities.Environment)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByProject indicates an expected call of FindByProject.
func (mr *MockEnvironmentPortMockRecorder) FindByProject(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProject", reflect.TypeOf((*MockEnvironmentPort)(nil).FindByProject), ctx, projectID)
}

// FindServiceByID mocks base method.
func (m *MockEnvironmentPort) FindServiceByID(ctx context.Context, id, serviceID int) (*entities.EnvironmentService, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServiceByID", ctx, id, serviceID)
	ret0, _ := ret[0].(*entities.EnvironmentService)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindServiceByID indicates an expected call of FindServiceByID.
func (mr *MockEnvironmentPortMockRecorder) FindServiceByID(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceByID", reflect.TypeOf((*MockEnvironmentPort)(nil).FindServiceByID), ctx, id, serviceID)
}

// GetProjectServiceQuotaUsage mocks base method.
func (m *MockEnvironmentPort) GetProjectServiceQuotaUsage(ctx context.Context, id, serviceID int) (*dto.QuotaUsage, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectServiceQuotaUsage", ctx, id, serviceID)
	ret0, _ := ret[0].(*dto.QuotaUsage)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetProjectServiceQuotaUsage indicates an expected call of GetProjectServiceQuotaUsage.
func (mr *MockEnvironmentPortMockRecorder) GetProjectServiceQuotaUsage(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectServiceQuotaUsage", reflect.TypeOf((*MockEnvironmentPort)(nil).GetProjectServiceQuotaUsage), ctx, id, serviceID)
}

// IncreaseAvailableRequest mocks base method.
func (m *MockEnvironmentPort) IncreaseAvailableRequest(ctx context.Context, id, serviceID int) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseAvailableRequest", ctx, id, serviceID)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// IncreaseAvailableRequest indicates an expected call of IncreaseAvailableRequest.
func (mr *MockEnvironmentPortMockRecorder) IncreaseAvailableRequest(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseAvailableRequest", reflect.TypeOf((*MockEnvironmentPort)(nil).IncreaseAvailableRequest), ctx, id, serviceID)
}

// IsActive mocks base method.
func (m *MockEnvironmentPort) IsActive(ctx context.Context, id int) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// IsActive indicates an expected call of IsActive.
func (mr *MockEnvironmentPortMockRecorder) IsActive(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockEnvironmentPort)(nil).IsActive), ctx, id)
}

// MissingResourceDiagnosis mocks base method.
func (m *MockEnvironmentPort) MissingResourceDiagnosis(ctx context.Context, id, service_id int) (bool, bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MissingResourceDiagnosis", ctx, id, service_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(*errors.Error)
	return ret0, ret1, ret2
}

// MissingResourceDiagnosis indicates an expected call of MissingResourceDiagnosis.
func (mr *MockEnvironmentPortMockRecorder) MissingResourceDiagnosis(ctx, id, service_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MissingResourceDiagnosis", reflect.TypeOf((*MockEnvironmentPort)(nil).MissingResourceDiagnosis), ctx, id, service_id)
}

// RemoveService mocks base method.
func (m *MockEnvironmentPort) RemoveService(ctx context.Context, id, serviceID int) (int64, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveService", ctx, id, serviceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockEnvironmentPortMockRecorder) RemoveService(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockEnvironmentPort)(nil).RemoveService), ctx, id, serviceID)
}

// RemoveServiceFromProjectEnvironments mocks base method.
func (m *MockEnvironmentPort) RemoveServiceFromProjectEnvironments(ctx context.Context, projectID, serviceID int) (int64, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceFromProjectEnvironments", ctx, projectID, serviceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// RemoveServiceFromProjectEnvironments indicates an expected call of RemoveServiceFromProjectEnvironments.
func (mr *MockEnvironmentPortMockRecorder) RemoveServiceFromProjectEnvironments(ctx, projectID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceFromProjectEnvironments", reflect.TypeOf((*MockEnvironmentPort)(nil).RemoveServiceFromProjectEnvironments), ctx, projectID, serviceID)
}

// ResetAvailableRequests mocks base method.
func (m *MockEnvironmentPort) ResetAvailableRequests(ctx context.Context, id, serviceID int) (*entities.EnvironmentService, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAvailableRequests", ctx, id, serviceID)
	ret0, _ := ret[0].(*entities.EnvironmentService)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ResetAvailableRequests indicates an expected call of ResetAvailableRequests.
func (mr *MockEnvironmentPortMockRecorder) ResetAvailableRequests(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAvailableRequests", reflect.TypeOf((*MockEnvironmentPort)(nil).ResetAvailableRequests), ctx, id, serviceID)
}

// Save mocks base method.
func (m *MockEnvironmentPort) Save(ctx context.Context, environment *entities.Environment) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, environment)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockEnvironmentPortMockRecorder) Save(ctx, environment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEnvironmentPort)(nil).Save), ctx, environment)
}

// Update mocks base method.
func (m *MockEnvironmentPort) Update(ctx context.Context, id int, update *dto.EnvironmentUpdate) (*entities.Environment, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, update)
	ret0, _ := ret[0].(*entities.Environment)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEnvironmentPortMockRecorder) Update(ctx, id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEnvironmentPort)(nil).Update), ctx, id, update)
}

// UpdateService mocks base method.
func (m *MockEnvironmentPort) UpdateService(ctx context.Context, id, serviceID int, update *dto.EnvironmentServiceUpdate) (*entities.EnvironmentService, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", ctx, id, serviceID, update)
	ret0, _ := ret[0].(*entities.EnvironmentService)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockEnvironmentPortMockRecorder) UpdateService(ctx, id, serviceID, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockEnvironmentPort)(nil).UpdateService), ctx, id, serviceID, update)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/project.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/project.go -destination=internal/ports/outbound/mock/project.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	dto "github.com/MAD-py/pandora-core/internal/domain/dto"
	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectPort is a mock of ProjectPort interface.
type MockProjectPort struct {
	ctrl     *gomock.Controller
	recorder *MockProjectPortMockRecorder
	isgomock struct{}
}

// MockProjectPortMockRecorder is the mock recorder for MockProjectPort.
type MockProjectPortMockRecorder struct {
	mock *MockProjectPort
}

// NewMockProjectPort creates a new mock instance.
func NewMockProjectPort(ctrl *gomock.Controller) *MockProjectPort {
	mock := &MockProjectPort{ctrl: ctrl}
	mock.recorder = &MockProjectPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectPort) EXPECT() *MockProjectPortMockRecorder {
	return m.recorder
}

// AddService mocks base method.
func (m *MockProjectPort) AddService(ctx context.Context, id int, service *entities.ProjectService) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", ctx, id, service)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// AddService indicates an expected call of AddService.
func (mr *MockProjectPortMockRecorder) AddService(ctx, id, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockProjectPort)(nil).AddService), ctx, id, service)
}

// Exists mocks base method.
func (m *MockProjectPort) Exists(ctx context.Context, id int) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockProjectPortMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockProjectPort)(nil).Exists), ctx, id)
}

// ExistsServiceIn mocks base method.
func (m *MockProjectPort) ExistsServiceIn(ctx context.Context, serviceID int) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsServiceIn", ctx, serviceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ExistsServiceIn indicates an expected call of ExistsServiceIn.
func (mr *MockProjectPortMockRecorder) ExistsServiceIn(ctx, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsServiceIn", reflect.TypeOf((*MockProjectPort)(nil).ExistsServiceIn), ctx, serviceID)
}

// FindByClient mocks base method.
func (m *MockProjectPort) FindByClient(ctx context.Context, clientID int) ([]*entities.Project, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByClient", ctx, clientID)
	ret0, _ := ret[0].([]*entities.Project)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByClient indicates an expected call of FindByClient.
func (mr *MockProjectPortMockRecorder) FindByClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByClient", reflect.TypeOf((*MockProjectPort)(nil).FindByClient), ctx, clientID)
}

// FindByID mocks base method.
func (m *MockProjectPort) FindByID(ctx context.Context, id int) (*entities.Project, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entities.Project)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockProjectPortMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProjectPort)(nil).FindByID), ctx, id)
}

// FindServiceByID mocks base method.
func (m *MockProjectPort) FindServiceByID(ctx context.Context, id, serviceID int) (*entities.ProjectService, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServiceByID", ctx, id, serviceID)
	ret0, _ := ret[0].(*entities.ProjectService)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindServiceByID indicates an expected call of FindServiceByID.
func (mr *MockProjectPortMockRecorder) FindServiceByID(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceByID", reflect.TypeOf((*MockProjectPort)(nil).FindServiceByID), ctx, id, serviceID)
}

// GetProjectServiceQuotaUsage mocks base method.
func (m *MockProjectPort) GetProjectServiceQuotaUsage(ctx context.Context, id, serviceID int) (*dto.QuotaUsage, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectServiceQuotaUsage", ctx, id, serviceID)
	ret0, _ := ret[0].(*dto.QuotaUsage)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetProjectServiceQuotaUsage indicates an expected call of GetProjectServiceQuotaUsage.
func (mr *MockProjectPortMockRecorder) GetProjectServiceQuotaUsage(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectServiceQuotaUsage", reflect.TypeOf((*MockProjectPort)(nil).GetProjectServiceQuotaUsage), ctx, id, serviceID)
}

// RemoveService mocks base method.
func (m *MockProjectPort) RemoveService(ctx context.Context, id, serviceID int) (int64, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveService", ctx, id, serviceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockProjectPortMockRecorder) RemoveService(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockProjectPort)(nil).RemoveService), ctx, id, serviceID)
}

// ResetAvailableRequestsForEnvsService mocks base method.
func (m *MockProjectPort) ResetAvailableRequestsForEnvsService(ctx context.Context, id, serviceID int) ([]*dto.EnvironmentServiceReset, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAvailableRequestsForEnvsService", ctx, id, serviceID)
	ret0, _ := ret[0].([]*dto.EnvironmentServiceReset)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ResetAvailableRequestsForEnvsService indicates an expected call of ResetAvailableRequestsForEnvsService.
func (mr *MockProjectPortMockRecorder) ResetAvailableRequestsForEnvsService(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAvailableRequestsForEnvsService", reflect.TypeOf((*MockProjectPort)(nil).ResetAvailableRequestsForEnvsService), ctx, id, serviceID)
}

// ResetProjectServiceUsage mocks base method.
func (m *MockProjectPort) ResetProjectServiceUsage(ctx context.Context, id, serviceID int, nextReset time.Time) ([]*dto.EnvironmentServiceReset, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetProjectServiceUsage", ctx, id, serviceID, nextReset)
	ret0, _ := ret[0].([]*dto.EnvironmentServiceReset)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ResetProjectServiceUsage indicates an expected call of ResetProjectServiceUsage.
func (mr *MockProjectPortMockRecorder) ResetProjectServiceUsage(ctx, id, serviceID, nextReset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetProjectServiceUsage", reflect.TypeOf((*MockProjectPort)(nil).ResetProjectServiceUsage), ctx, id, serviceID, nextReset)
}

// Save mocks base method.
func (m *MockProjectPort) Save(ctx context.Context, project *entities.Project) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, project)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProjectPortMockRecorder) Save(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProjectPort)(nil).Save), ctx, project)
}

// Update mocks base method.
func (m *MockProjectPort) Update(ctx context.Context, id int, update *dto.ProjectUpdate) (*entities.Project, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, update)
	ret0, _ := ret[0].(*entities.Project)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectPortMockRecorder) Update(ctx, id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectPort)(nil).Update), ctx, id, update)
}

// UpdateService mocks base method.
func (m *MockProjectPort) UpdateService(ctx context.Context, id, serviceID int, update *dto.ProjectServiceUpdate) (*entities.ProjectService, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", ctx, id, serviceID, update)
	ret0, _ := ret[0].(*entities.ProjectService)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockProjectPortMockRecorder) UpdateService(ctx, id, serviceID, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockProjectPort)(nil).UpdateService), ctx, id, serviceID, update)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/outbound/credentials.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/outbound/credentials.go -destination=internal/ports/outbound/mock/credentials.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/MAD-py/pandora-core/internal/domain/entities"
	errors "github.com/MAD-py/pandora-core/internal/domain/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockCredentialsPort is a mock of CredentialsPort interface.
type MockCredentialsPort struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsPortMockRecorder
	isgomock struct{}
}

// MockCredentialsPortMockRecorder is the mock recorder for MockCredentialsPort.
type MockCredentialsPortMockRecorder struct {
	mock *MockCredentialsPort
}

// NewMockCredentialsPort creates a new mock instance.
func NewMockCredentialsPort(ctrl *gomock.Controller) *MockCredentialsPort {
	mock := &MockCredentialsPort{ctrl: ctrl}
	mock.recorder = &MockCredentialsPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsPort) EXPECT() *MockCredentialsPortMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockCredentialsPort) ChangePassword(ctx context.Context, credentials *entities.Credentials) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, credentials)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockCredentialsPortMockRecorder) ChangePassword(ctx, credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockCredentialsPort)(nil).ChangePassword), ctx, credentials)
}

// FindCredentials mocks base method.
func (m *MockCredentialsPort) FindCredentials(ctx context.Context, username string) (*entities.Credentials, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCredentials", ctx, username)
	ret0, _ := ret[0].(*entities.Credentials)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// FindCredentials indicates an expected call of FindCredentials.
func (mr *MockCredentialsPortMockRecorder) FindCredentials(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCredentials", reflect.TypeOf((*MockCredentialsPort)(nil).FindCredentials), ctx, username)
}
